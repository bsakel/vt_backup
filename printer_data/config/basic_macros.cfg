[gcode_macro PRINT_START]
#	Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode:
    # Parameters
    {% set bedtemp = params.BED|default(110)|int %}
    {% set hotendtemp = params.HOTEND|default(250)|int %}
    {% set bedmeshcalibrate = params.BEDMESHCALIBRATE|default(1)|int %}
    {% set purgeline = params.PURGELINE|default(1)|int %}

    {% set chambertemp = params.CHAMBER|default(35)|int %}
    {% set chambertempwait = params.CHAMBERTEMPWAIT|default(1)|int %}

    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

    SET_PIN PIN=daylight VALUE=0.50     # Turn on Lights

    _CG28                                                                           # Conditional Homing

    status_busy
    M190 S{bedtemp}                                                                 # set & wait for bed temp

    {% if chambertempwait == 1 %}
      SET_DISPLAY_TEXT MSG="Heatsoak: {chambertemp}c"                               
      TEMPERATURE_WAIT SENSOR="temperature_sensor enclosure_temp" MINIMUM={chambertemp}    # Waits for chamber to reach desired temp
	  {% endif %}

    M109 S135                                                                       # Heats the nozzle to 150c

    Z_TILT_ADJUST                                                                   # Levels the buildplate via z_tilt_adjust
 
    {% if bedmeshcalibrate == 1 %}
      BED_MESH_CALIBRATE                 # Starts bed mesh
	  {% endif %}

    # Heats up the nozzle up to target via data from slicer
    G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
    M107                                                          # Turns off partcooling fan
    M109 S{hotendtemp}                                            # Heats the nozzle to printing temp

    SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
    STATUS_PRINTING                                  # Sets SB-leds to printing-mode
    {% if purgeline == 1 %}
      _PURGE_LINE
    {% endif %}
	

[gcode_macro PRINT_END]
#	Use PRINT_END for the slicer ending script
gcode:
	#	Get Boundaries
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

	#	Check end position to determine safe directions to move
	{% if printer.toolhead.position.x < (max_x - 20) %}
		{% set x_safe = 20.0 %}
	{% else %}
		{% set x_safe = -20.0 %}
	{% endif %}

	{% if printer.toolhead.position.y < (max_y - 20) %}
		{% set y_safe = 20.0 %}
	{% else %}
		{% set y_safe = -20.0 %}
	{% endif %}

	{% if printer.toolhead.position.z < (max_z - 2) %}
		{% set z_safe = 2.0 %}
	{% else %}
		{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}

	#  Commence PRINT_END
	M400							 ; wait for buffer to clear
	G92 E0							 ; zero the extruder
	G1 E-15.0 F3600					 ; retract
	G91								 ; relative positioning
	G0 Z{z_safe} F3600				 ; move nozzle up
	G0 X{x_safe} Y{y_safe} F20000	 ; move nozzle to remove stringing

	M104 S0							 ; turn off hotend
	M140 S0							 ; turn off bed
	M106 S0							 ; turn off fan
	G90								 ; absolute positioning
	G0 X{max_x / 2} Y{max_y} F3600	 ; park nozzle at rear
	M117 Finished!

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 E-{E} F2100
  G1 Z{z_safe} F900
  G90
  G1 X{x_park} Y{y_park} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### end of definitions #####
  G91
  G1 E{E} F2100
  RESTORE_GCODE_STATE NAME=PAUSE_state
  BASE_RESUME

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PREP_PRINTER]
gcode:
	G28 Y0 X0 Z0
	Z_TILT_ADJUST
	#BED_MESH_CALIBRATE
	G28 Y0 X0 Z0

[gcode_macro GOTO_CENTER]
gcode:
  {% set Z = params.Z|default(25)|float %}
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2 %}
  _CG28                   ; Conditional Homing
  G90								      ; absolute positioning
  G0 X{x_center} Y{y_center} Z{Z} F3600
